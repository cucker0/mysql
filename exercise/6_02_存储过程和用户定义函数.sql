-- 存储过程和用户定义函数


/*
Stored Procedure
function

概念：事先经过编译并保存在数据库中的一组sql语句集合。类似java中的方法


## 存储过程和自定义函数的优点
* 提高代码的重用性
* 简化操作
* 减少了编译次数，并且减少了客户端与服务器的连接次数，
减少数据在数据库和应用服务器之间的传输，提高了效率



## 存储过程、函数对比
* 本质上没区别
* 语法
    
    
    
* 返回值
    * 函数有且仅有一个返回值，制定返回值的数值类型
    * 存储过程可以没有返回值、可以返回一个或多个值

* 限制不同
    函数中函数体的限制较多，不能使用显式或隐式方式打开
    transaction、commit、rollback、set autocommit=0等, 
    存储过程可以使用几乎所有的sql语句
* 赋值方式
    * 函数可以采用select ... into ...方式和set值得方式进行赋值， 只能用return返回结果集
    * 存储过程可以使用select的方式进行返回结果集
* 调用方式
    * select 函数名(参数列表);
    * call 存储过程名(参数列表);
* 
    * 存储过程实现的功能要复杂一点，功能强大些，可以执行包括修改表等一系列数据库操作
    * 函数的实现的功能针对性比较强，用户定义函数不能用于执行一组修改全局数据库状态的操作

*/



-- 存储过程
-- 

-- 创建存储过程语法
/*
create procedure 存储过程名(参数模式 参数名 参数类型, ...)
begin
    存储过程体(一组合法的sql语句);
end 提交分隔符

* 参数模式
in: 标识该参数为传入参数
out: 标识该参数为返回的参数
inout: 标识该参数即使传入的参数，又是返回的参数

* 使用mysql自带的客户端，需要重置提交分隔符，
    默认为;
    提交分隔符可以是一个字符也可以是多个字符
    delimiter 提交分隔符
    为什么要修改提交符，是因为存储体中已经有了默认的;提交符，
    但创建存储过程这个方法时，还不能提交，必须到end 结束处才能提交，说到底还是mysql客户端做得不够智能
* SQLyog、Navicat Premium等客户端
创建存储过程、函数式时，会自动设置delimiter为其他符号，不需要修改提交分隔符，直接就能创建存储过程和函数
* 如果存储过程体只有一个语句，可以省略begin、end关键字
* 存过过程体中的sql语句必须以;结尾

*/


-- 调用存储过程语法
/*
call 存储过程名(实参列表);

*/

# 空参列表
# 案例：使用存储过程插入5条数据到girls库的admin表中


USE girls;
SELECT * FROM admin;

-- delimiter $
-- 表示提交分隔符设置为$, 注意后面没有;，可以设置多个字符组合为提交分隔符
-- delimiter ;;  -- 表示提交分隔符为 ;;

CREATE PROCEDURE myp1()
BEGIN
    INSERT INTO admin (username, `password`) VALUES
    ('tom1', '123456'),
    ('tom2', '123456'),
    ('tom3', '123456'),
    ('tom4', '123456'),
    ('tom5', '123456');
END;


DROP PROCEDURE myp1;





